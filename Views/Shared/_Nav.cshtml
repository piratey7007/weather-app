@model WeatherApp.Models.WeatherLocations

<div>
    <nav id="nav" class="flex h-fit w-full min-w-fit justify-center">
        <ul class="flex">
            @if (ViewData["Title"]!.ToString()!.StartsWith("/locations"))
            {
                <a class="opacity-0 fluid-base" id="locationRef" href="/locations">
                    Locations
                </a>
                <a class="opacity-50 fluid-base" href="/forecasts">
                    Forecasts
                </a>
                <a class="opacity-100 fluid-lg" href="/locations">
                    Locations
                </a>
                <a class="opacity-50 fluid-base" href="/forecasts">
                    Forecasts
                </a>
                <a class="opacity-0 fluid-base" href="/locations">
                    Locations
                </a>
            }
            else
            {
                <a class="opacity-0 fluid-base" href="/forecasts">
                    Forecasts
                </a>
                <a class="opacity-50 fluid-base" href="/locations">
                    Locations
                </a>
                <a class="opacity-100 fluid-lg" href="/forecasts">
                    Forecasts
                </a>
                <a class="opacity-50 fluid-base" href="/locations">
                    Locations
                </a>
                <a class="opacity-0 fluid-base" href="/forecasts">
                    Forecasts
                </a>
            }
        </ul>
    </nav>
    <div class="flex flex-col gap-2">
        @if (!ViewData["Title"]!.ToString()!.StartsWith("/locations") && Model != null && Model.Locations != null)
        {
            @foreach (var key in Model.Locations.Keys)
            {
                var location = Model.Locations[key];
                <div class="flex justify-between">
                    <div class="flex flex-col justify-between">
                        <h3>@location.Name</h3>
                        <div class="flex gap-4">
                            <span>H</span>
                            <span>@location.High</span>
                            <span>L</span>
                            <span>@location.Low</span>
                        </div>
                        <p>@location.Description</p>
                    </div>
                    <div class="flex justify-center">
                        <img src="@location.Forecast.GetIconUrl(location.Forecast.ForecastChunks)" />
                        <h2>@location.Temperature</h2>
                        <span>Â°F</span>
                    </div>
                </div>
            }
        }
        else
        {
            <div>Locations . . .</div>
        }
    </div>
</div>


<script>
    onload = () => {
        function init() {
            const viewWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            const isSm = viewWidth < 640;
            const nav = document.querySelector('#nav');
            const ul = nav.querySelector('ul');
            const a = ul.querySelectorAll('a');
            let main = "flex justify-center items-center transition-all duration-500";
            let w = isSm ? "w-24" : "w-32";
            a[0].className = `${main} ${w} opacity-0 fluid-base`;
            a[1].className = `${main} ${w} opacity-50 fluid-base`;
            a[2].className = `${main} ${w} opacity-100 fluid-lg`;
            a[3].className = `${main} ${w} opacity-50 fluid-base`;
            a[4].className = `${main} ${w} opacity-0 fluid-base`;
        }

        function click(e) {
            const viewWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            const isSm = viewWidth < 640;
            const nav = document.querySelector('#nav');
            const ul = document.querySelector('#nav ul');
            const a = document.querySelectorAll('#nav ul a');
            const locationRef = document.querySelector('#locationRef');
            let location = false;
            let direction = "right";
            if (a[0] === locationRef) location = true;
            if (e.target.closest('a') === a[0]) direction = "left";
            let main = "flex justify-center items-center";
            let w = isSm ? "w-24" : "w-32";
            let translateX = isSm ? "translate-x-24" : "translate-x-32";
            let negTranslateX = isSm ? "-translate-x-24" : "-translate-x-32";
            let mid = "fluid-md opacity-50";
            let subst = "opacity-0 fluid-base";
            let suben = "opacity-100 fluid-lg";
            let outst = "opacity-0 fluid-base";
            let outen = "opacity-50 fluid-base";
            ul.className = `flex transition-all duration-500 ${direction === "right" ? translateX : negTranslateX}`;
            a[0].className = `${main} ${w} ${direction === "right" ? outst : outen}`;
            a[1].className = `${main} ${w} ${direction === "right" ? subst : suben}`;
            a[2].className = `${main} ${w} ${mid}`;
            a[3].className = `${main} ${w} ${direction === "right" ? suben : subst}`;
            a[4].className = `${main} ${w} ${direction === "right" ? outen : outst}`;

            setTimeout(() => {
                ul.className = `flex transition-all duration-500 ${direction === "right" ? negTranslateX : translateX}`;
                a[0].className = `${main} ${w} ${direction === "right" ? outen : outst}`;
                a[1].className = `${main} ${w} ${direction === "right" ? suben : subst}`;
                a[2].className = `${main} ${w} ${mid}`;
                a[3].className = `${main} ${w} ${direction === "right" ? subst : suben}`;
                a[4].className = `${main} ${w} ${direction === "right" ? outst : outen}`;
            }, 500);
        }

        init();
        document.addEventListener("click", (e) => {
            if (e.target.closest('#nav ul a')) click(e);
        });
    }
</script>