@* import { useEffect, useState } from "react";
    import { Link, useLocation, useNavigate } from "react-router-dom";
    import { useBreakpoint } from "../contexts/BreakpointContext";
    import useCl from "../hooks/useCl";

    function sleep(ms: number) {
    return new Promise((resolve) => setTimeout(resolve, ms));
    }

    export default function Nav() {
    const location = useLocation();
    const { isSm } = useBreakpoint();
    const { w, translateX, negTranslateX } = useCl();
    const navigate = useNavigate();
    const [className, setClassName] = useState({
    ul: "",
    main: `flex justify-center items-center transition-all duration-500`,
    w,
    translateX,
    negTranslateX,
    mid: "fluid-lg opacity-100",
    subst: "opacity-50 fluid-base",
    suben: "opacity-50 fluid-base",
    outst: "opacity-0 fluid-base",
    outen: "opacity-0 fluid-base",
    });
    const [direction, setDirection] = useState<"left" | "right">();

    useEffect(() => {
    setClassName((prev) => ({
    ...prev,
    w,
    translateX,
    negTranslateX,
    }));
    }, [isSm, w, translateX, negTranslateX]);

    async function handleClick(
    e: React.MouseEvent<HTMLAnchorElement>,
    direction?: "left" | "right",
    ) {
    e.preventDefault();
    setDirection(direction);
    if (!direction) return;
    const path = e.currentTarget.getAttribute("href")!;
    navigate(path);
    if (direction) {
    setClassName({
    ul: direction === "left" ? translateX : negTranslateX,
    main: `flex justify-center items-center`,
    w,
    translateX,
    negTranslateX,
    mid: "fluid-base opacity-50",
    subst: "opacity-0 fluid-base",
    suben: "opacity-100 fluid-lg",
    outst: "opacity-0 fluid-base",
    outen: "opacity-50 fluid-base",
    });
    await sleep(0);
    setClassName({
    ul: "transition-all duration-500",
    main: `flex justify-center items-center transition-all duration-500`,
    w,
    translateX,
    negTranslateX,
    mid: "fluid-lg opacity-100",
    subst: "opacity-50 fluid-base",
    suben: "opacity-50 fluid-base",
    outst: "opacity-0 fluid-base",
    outen: "opacity-0 fluid-base",
    });
    }
    }

    return (
    <nav
    className={`flex h-fit w-full min-w-fit justify-center ${className.ul}`}
    >
    <LocationsPath
    handleClick={handleClick}
    className={className}
    direction={direction}
    />
    <ForecastsPath
    handleClick={handleClick}
    className={className}
    direction={direction}
    />
    </nav>
    );
    }

    function LocationsPath({ handleClick, className, direction }: any) {
    if (location.pathname.startsWith("/locations")) {
    return (
    <>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.outst : className.outen
    }`}
    to="/locations"
    onClick={(e) => handleClick(e)}
    >
    Locations
    </Link>
    <Link
    className={`${className.main} ${className.w} ${className.w} ${
    direction === "right" ? className.subst : className.suben
    }`}
    to="/forecasts"
    onClick={(e) => handleClick(e, "right")}
    >
    Forecasts
    </Link>
    <Link
    className={`${className.main} ${className.w} ${className.mid}`}
    to="/locations"
    onClick={(e) => handleClick(e)}
    >
    Locations
    </Link>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.suben : className.subst
    }`}
    to="/forecasts"
    onClick={(e) => handleClick(e, "left")}
    >
    Forecasts
    </Link>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.outen : className.outst
    }`}
    to="/locations"
    onClick={(e) => handleClick(e)}
    >
    Locations
    </Link>
    </>
    );
    }
    return null;
    }

    function ForecastsPath({ handleClick, className, direction }: any) {
    if (location.pathname.startsWith("/forecasts")) {
    return (
    <>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.outst : className.outen
    }`}
    to="/forecasts"
    onClick={(e) => handleClick(e)}
    >
    Forecasts
    </Link>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.subst : className.suben
    }`}
    to="/locations"
    onClick={(e) => handleClick(e, "right")}
    >
    Locations
    </Link>
    <Link
    className={`${className.main} ${className.w} ${className.mid}`}
    to="/forecasts"
    onClick={(e) => handleClick(e)}
    >
    Forecasts
    </Link>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.suben : className.subst
    }`}
    to="/locations"
    onClick={(e) => handleClick(e, "left")}
    >
    Locations
    </Link>
    <Link
    className={`${className.main} ${className.w} ${
    direction === "right" ? className.outen : className.outst
    }`}
    to="/forecasts"
    onClick={(e) => handleClick(e)}
    >
    Forecasts
    </Link>
    </>
    );
    }
    return null;
    } *@

@* This is the Nav in CSHTML *@

@* const [className, setClassName] = useState({
    ul: "",
    main: `flex justify-center items-center transition-all duration-500`,
    w,
    translateX,
    negTranslateX,
    mid: "fluid-lg opacity-100",
    subst: "opacity-50 fluid-base",
    suben: "opacity-50 fluid-base",
    outst: "opacity-0 fluid-base",
    outen: "opacity-0 fluid-base",
    }); *@

@* export default function useCl() {
    const { isSm } = useBreakpoint();
    const [w, setW] = useState(isSm ? "w-24" : "w-32");
    const [translateX, setTranslateX] = useState(
    isSm ? "translate-x-24" : "translate-x-32",
    );
    const [negTranslateX, setNegTranslateX] = useState(
    isSm ? "-translate-x-24" : "-translate-x-32",
    );

    useEffect(() => {
    if (isSm) {
    setW("w-24");
    setTranslateX("translate-x-24");
    setNegTranslateX("-translate-x-24");
    } else {
    setW("w-32");
    setTranslateX("translate-x-32");
    setNegTranslateX("-translate-x-32");
    }
    }, [isSm]);

    return { w, translateX, negTranslateX };
    } *@

<nav id="nav" class="flex h-fit w-full min-w-fit justify-center">
    <ul class="flex">
        @if (ViewData["Title"]!.ToString()!.StartsWith("/locations"))
        {
            <a class="opacity-0 fluid-base" id="locationRef" href="/locations">
                Locations
            </a>
            <a class="opacity-50 fluid-base" href="/forecasts">
                Forecasts
            </a>
            <a class="opacity-100 fluid-lg" href="/locations">
                Locations
            </a>
            <a class="opacity-50 fluid-base" href="/forecasts">
                Forecasts
            </a>
            <a class="opacity-0 fluid-base" href="/locations">
                Locations
            </a>
        }
        else
        {
            <a class="opacity-0 fluid-base" href="/forecasts">
                Forecasts
            </a>
            <a class="opacity-50 fluid-base" href="/locations">
                Locations
            </a>
            <a class="opacity-100 fluid-lg" href="/forecasts">
                Forecasts
            </a>
            <a class="opacity-50 fluid-base" href="/locations">
                Locations
            </a>
            <a class="opacity-0 fluid-base" href="/forecasts">
                Forecasts
            </a>

        }
    </ul>
</nav>
<script>
    onload = () => {
        function init() {
            const viewWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            const isSm = viewWidth < 640;
            const nav = document.querySelector('#nav');
            const ul = nav.querySelector('ul');
            const a = ul.querySelectorAll('a');
            let main = "flex justify-center items-center transition-all duration-500";
            let w = isSm ? "w-24" : "w-32";
            a[0].className = `${main} ${w} opacity-0 fluid-base`;
            a[1].className = `${main} ${w} opacity-50 fluid-base`;
            a[2].className = `${main} ${w} opacity-100 fluid-lg`;
            a[3].className = `${main} ${w} opacity-50 fluid-base`;
            a[4].className = `${main} ${w} opacity-0 fluid-base`;
        }

        function click(e) {
            const viewWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
            const isSm = viewWidth < 640;
            const nav = document.querySelector('#nav');
            const ul = document.querySelector('#nav ul');
            const a = document.querySelectorAll('#nav ul a');
            const locationRef = document.querySelector('#locationRef');
            let location = false;
            let direction = "right";
            if (a[0] === locationRef) location = true;
            if (e.target.closest('a') === a[0]) direction = "left";
            let main = "flex justify-center items-center";
            let w = isSm ? "w-24" : "w-32";
            let translateX = isSm ? "translate-x-24" : "translate-x-32";
            let negTranslateX = isSm ? "-translate-x-24" : "-translate-x-32";
            let mid = "fluid-md opacity-50";
            let subst = "opacity-0 fluid-base";
            let suben = "opacity-100 fluid-lg";
            let outst = "opacity-0 fluid-base";
            let outen = "opacity-50 fluid-base";
            ul.className = `flex transition-all duration-500 ${direction === "right" ? translateX : negTranslateX}`;
            a[0].className = `${main} ${w} ${direction === "right" ? outst : outen}`;
            a[1].className = `${main} ${w} ${direction === "right" ? subst : suben}`;
            a[2].className = `${main} ${w} ${mid}`;
            a[3].className = `${main} ${w} ${direction === "right" ? suben : subst}`;
            a[4].className = `${main} ${w} ${direction === "right" ? outen : outst}`;

            setTimeout(() => {
                ul.className = `flex transition-all duration-500 ${direction === "right" ? negTranslateX : translateX}`;
                a[0].className = `${main} ${w} ${direction === "right" ? outen : outst}`;
                a[1].className = `${main} ${w} ${direction === "right" ? suben : subst}`;
                a[2].className = `${main} ${w} ${mid}`;
                a[3].className = `${main} ${w} ${direction === "right" ? subst : suben}`;
                a[4].className = `${main} ${w} ${direction === "right" ? outst : outen}`;
            }, 500);
        }

        init();
        document.addEventListener("click", (e) => {
            if (e.target.closest('#nav ul a')) click(e);
        });
    }
</script>